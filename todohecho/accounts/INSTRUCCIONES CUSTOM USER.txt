INSTRUCCIONES PARA USUARIO CUSTOMAGREGAR LO SIGUIENTE:EN CONSOLA: django-admin startapp accountsCrear:backends.pyurls.py##################EN ADMIN.PYfrom django.contrib import adminfrom .models import Accountfrom django.contrib.auth.admin import UserAdmin# Register your models here.class AccountAdmin(UserAdmin):    list_display = ('email','username','date_joined','last_login','is_admin','is_staff')    search_fields = ('email','username')    filter_horizontal=()    list_filter=()    fieldsets=()    readonly_fields = ('id','date_joined','last_login')admin.site.register(Account,AccountAdmin)##################EN BACKENDS.PY - (Opcional, hace que ignore las mayœsculas en el mail, no en la contrase–a)from django.contrib.auth import get_user_modelfrom django.contrib.auth.backends import ModelBackend# FORMA DE QUE IGNORE MAYUSCULAS AL HACER LOGINclass CaseInsensitiveModelBackend(ModelBackend):    def authenticate(self, request, username, password, **kwargs):        UserModel = get_user_model()        if username is None:            username= kwargs.get(UserModel.USERNAME_FIELD)        try:            case_insensitive_username_field = '{}__iexact'.format(UserModel.USERNAME_FIELD)            user = UserModel._default_manager.get(**{case_insensitive_username_field : username})        except UserModel.DoesNotExist:            UserModel().set_password(password)        else:            if user.check_password(password) and self.user_can_authenticate(user):                return user##################EN MODELS.PYfrom django.db import modelsfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager# Create your models here.# def get_profile_image_filepath(self,filename):#     return f"profile_images/{self.pk}/{'profile_image.png'}"# def get_default_profile_image():#     return 'static/logo_1080.png'class MyAccountManager(BaseUserManager):    def create_user(self,email,username,password=None):        if not email:            raise ValueError("Se debe registrar un mail v‡lido")        if not username:            raise ValueError("Por favor, ingres‡ un nombre de usuario")        user = self.model(            email = self.normalize_email(email),            username = username,        )        user.set_password(password)        user.save(using=self._db)        return user    def create_superuser(self, email, username, password):        user = self.create_user(            email = self.normalize_email(email),            username = username,            password=password            )        user.is_admin = True        user.is_staff = True        user.is_superuser = True        user.save(using=self._db)        return userclass Account(AbstractBaseUser):    email           = models.EmailField(verbose_name="Email",max_length=60,unique=True)    username        = models.CharField(verbose_name="Usuario",max_length=30, unique=True)    date_joined     = models.DateTimeField(verbose_name="Fecha en que se uni—", auto_now_add=True)    last_login      = models.DateTimeField(verbose_name="òltima sesi—n", auto_now=True)    is_admin        = models.BooleanField(default=False)    is_active       = models.BooleanField(default=True)    is_staff        = models.BooleanField(default=False)    is_superuser    = models.BooleanField(default=False)    # profile_image   = models.ImageField(max_length=255, upload_to=get_profile_image_filepath,null=True,blank=True,default=get_default_profile_image)    first_name      = models.CharField(verbose_name="Nombre", max_length=60)    last_name       = models.CharField(verbose_name="Apellido", max_length=60)    USERNAME_FIELD = 'email'    REQUIRED_FIELDS = ['username']    objects = MyAccountManager()    def __str__(self) -> str:        return self.username        def has_perm(self,perm,obj=None):        return self.is_admin    def has_module_perms(self,app_label):        return True################### EN SETTINGS.PY, DESPUES DE TEMPLATESAUTH_USER_MODEL = "accounts.Account"AUTHENTICATION_BACKENDS = (    'django.contrib.auth.backends.AllowAllUsersModelBackend',    'accounts.backends.CaseInsensitiveModelBackend')

# Al final de todo

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Recuperar contrase–a mientras modo debug. Colocar luego de DEBUG = True

if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backend.console.EmailBackend"

# Cuando el sitio entre en modo producci—n esto va a cambiar. Es solo para probar funcionalidad